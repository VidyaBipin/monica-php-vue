# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1-node-browsers
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: monica

    working_directory: ~/work

    steps:
      - checkout
      - run:
          name: Install packages
          command: |
            sudo apt-get update
            sudo apt-get install -y libzip-dev zlib1g-dev libicu-dev g++ mysql-client
      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-configure intl
            sudo docker-php-ext-install zip intl bcmath pdo_mysql

      - run: mkdir -p results/coverage
      - run: cp scripts/tests/.env.mysql.travis .env

    ## COMPOSER
      - run: sudo composer self-update
      # Download and cache dependencies
      - restore_cache:
          keys:
          - composer-v1-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - composer-v1-
      #Â Get packages
      - run: composer install --no-interaction --no-suggest --ignore-platform-reqs
      - save_cache:
          paths:
            - ./vendor
          key: composer-v1-{{ checksum "composer.json" }}

    ## NODE.JS
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

  # Build js and css assets
      - run:
          name: Build assets
          command: |
            php artisan lang:generate
            yarn run production

  # Prepare
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          name: Prepare database
          command: |
            php artisan migrate --env=testing --no-interaction -vvv
            php artisan db:seed --env=testing --no-interaction -vvv

  # Run unit tests
      - run:
          name: Run unit tests
          command: vendor/bin/phpunit -c phpunit.xml
      - store_test_results:
          path: results/junit.xml

  # Reports
#      - run: if [[ "$COVERAGE" == "1" ]]; then vendor/bin/phpcov merge --clover=$TRAVIS_BUILD_DIR/results/coverage2.xml $TRAVIS_BUILD_DIR/results/coverage/; fi
#      - run: if [[ "$COVERAGE" == "1" ]]; then scripts/tests/travis-sonar.sh; fi
